<table border=1><tr valign="top"><td><pre>fs = require 'fs'

blacklist = (word) -&gt;</pre></td><td><pre>(function() {
  var blacklist, coffee_lines, file_lines, fn_coffee, fn_js, fs, fuzzy_match, html_escape, js_lines, matches, parse_js_tokens, parse_tokens, side_by_side;
  var __indexOf = Array.prototype.indexOf || function(item) {
    for (var i = 0, l = this.length; i &lt; l; i++) {
      if (this[i] === item) return i;
    }
    return -1;
  };
  fs = require('fs');
  blacklist = function(word) {</pre></td></tr><tr valign="top"><td><pre>  return true if word.length &lt;= 2</pre></td><td><pre>    if (word.length &lt;= 2) {</pre></td></tr><tr valign="top"><td><pre>  return true if word in ['for', 'when', 'require', 'true', 'false', 'var', 'class', 'call', 'this']
  false
  
parse_tokens = (line) -&gt;</pre></td><td><pre>      return true;
    }
    if (word === 'for' || word === 'when' || word === 'require' || word === 'true' || word === 'false' || word === 'var' || word === 'class' || word === 'call' || word === 'this') {
      return true;
    }
    return false;
  };
  parse_tokens = function(line) {</pre></td></tr><tr valign="top"><td><pre>  line = line.split('#')[0]</pre></td><td><pre>    var matches, re, word, _i, _len, _results;
    line = line.split('#')[0];</pre></td></tr><tr valign="top"><td><pre>  re = /([A-Za-z0-9_]+)/g
  matches = line.match(re) or []</pre></td><td><pre>    re = /([A-Za-z0-9_]+)/g;
    matches = line.match(re) || [];</pre></td></tr><tr valign="top"><td><pre>  (word for word in matches when !blacklist word)

parse_js_tokens = (line) -&gt;</pre></td><td><pre>    _results = [];
    for (_i = 0, _len = matches.length; _i &lt; _len; _i++) {
      word = matches[_i];
      if (!blacklist(word)) {
        _results.push(word);
      }
    }
    return _results;
  };
  parse_js_tokens = function(line) {</pre></td></tr><tr valign="top"><td><pre>  return [] if ~line.indexOf(" var ")
  parse_tokens line

file_lines = (fn) -&gt;</pre></td><td><pre>    if (~line.indexOf(" var ")) {
      return [];
    }
    return parse_tokens(line);
  };
  file_lines = function(fn) {</pre></td></tr><tr valign="top"><td><pre>  fs.readFileSync(fn).toString().split '\n'</pre></td><td><pre>    return fs.readFileSync(fn).toString().split('\n');</pre></td></tr><tr valign="top"><td><pre>
fuzzy_match = (coffee_lines, js_lines) -&gt;</pre></td><td><pre>  };
  fuzzy_match = function(coffee_lines, js_lines) {</pre></td></tr><tr valign="top"><td><pre>  js_tokens = (parse_js_tokens(line) for line in js_lines)</pre></td><td><pre>    var clue_token, find_js_match, i, j, js_tokens, line, ln, matches, next_js_line, seen, token, tokens, _i, _j, _len, _len2, _len3;
    js_tokens = (function() {</pre></td></tr><tr valign="top"><td><pre>  j = 0
  matches = []
  
  find_js_match = (token) -&gt;</pre></td><td><pre>      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = js_lines.length; _i &lt; _len; _i++) {
        line = js_lines[_i];
        _results.push(parse_js_tokens(line));
      }
      return _results;
    })();
    j = 0;
    matches = [];
    find_js_match = function(token) {</pre></td></tr><tr valign="top"><td><pre>    for k in [j+1...js_tokens.length]
      return k if token in js_tokens[k]
    js_tokens.length
  
  seen = {}</pre></td><td><pre>      var k, _ref, _ref2;
      for (k = _ref = j + 1, _ref2 = js_tokens.length; _ref &lt;= _ref2 ? k &lt; _ref2 : k &gt; _ref2; _ref &lt;= _ref2 ? k++ : k--) {
        if (__indexOf.call(js_tokens[k], token) &gt;= 0) {
          return k;
        }
      }
      return js_tokens.length;
    };
    seen = {};</pre></td></tr><tr valign="top"><td><pre>  for line, i in coffee_lines
    tokens = parse_tokens line</pre></td><td><pre>    for (i = 0, _len = coffee_lines.length; i &lt; _len; i++) {
      line = coffee_lines[i];
      tokens = parse_tokens(line);</pre></td></tr><tr valign="top"><td><pre>    tokens = (token for token in tokens when !seen[token])
    if tokens.length &gt; 0
      for token in tokens
        seen[token] = true
      next_js_line = js_tokens.length</pre></td><td><pre>      tokens = (function() {
        var _i, _len2, _results;
        _results = [];
        for (_i = 0, _len2 = tokens.length; _i &lt; _len2; _i++) {
          token = tokens[_i];
          if (!seen[token]) {
            _results.push(token);
          }
        }
        return _results;
      })();
      if (tokens.length &gt; 0) {
        for (_i = 0, _len2 = tokens.length; _i &lt; _len2; _i++) {
          token = tokens[_i];
          seen[token] = true;
        }
        next_js_line = js_tokens.length;</pre></td></tr><tr valign="top"><td><pre>      for token in tokens
        ln = find_js_match(token)
        if ln &lt; next_js_line
          next_js_line = ln
          clue_token = token</pre></td><td><pre>        for (_j = 0, _len3 = tokens.length; _j &lt; _len3; _j++) {
          token = tokens[_j];
          ln = find_js_match(token);
          if (ln &lt; next_js_line) {
            next_js_line = ln;
            clue_token = token;</pre></td></tr><tr valign="top"><td><pre>      if next_js_line &lt; js_tokens.length
        j = next_js_line
        matches.push [i+1, j+1, clue_token]</pre></td><td><pre>          }
        }
        if (next_js_line &lt; js_tokens.length) {
          j = next_js_line;
          matches.push([i + 1, j + 1, clue_token]);</pre></td></tr><tr valign="top"><td><pre>  matches

html_escape = (text) -&gt;</pre></td><td><pre>        }
      }
    }
    return matches;
  };
  html_escape = function(text) {</pre></td></tr><tr valign="top"><td><pre>  text = text.replace /&amp;/g, "&amp;amp;"</pre></td><td><pre>    text = text.replace(/&amp;/g, "&amp;amp;");</pre></td></tr><tr valign="top"><td><pre>  text = text.replace /&lt;/g, "&amp;lt;"
  text = text.replace /&gt;/g, "&amp;gt;"
  text

side_by_side = (matches, source_lines, dest_lines) -&gt;</pre></td><td><pre>    text = text.replace(/&lt;/g, "&amp;lt;");
    text = text.replace(/&gt;/g, "&amp;gt;");
    return text;
  };
  side_by_side = function(matches, source_lines, dest_lines) {</pre></td></tr><tr valign="top"><td><pre>  s_start = d_start = 0</pre></td><td><pre>    var d_end, d_snippet, d_start, html, match, row, s_end, s_snippet, s_start, _i, _len;
    s_start = d_start = 0;</pre></td></tr><tr valign="top"><td><pre>  html = '&lt;table border=1&gt;'</pre></td><td><pre>    html = '&lt;table border=1&gt;';</pre></td></tr><tr valign="top"><td><pre>  row = (cells) -&gt;</pre></td><td><pre>    row = function(cells) {</pre></td></tr><tr valign="top"><td><pre>    html += '&lt;tr valign="top"&gt;'</pre></td><td><pre>      var cell;
      html += '&lt;tr valign="top"&gt;';</pre></td></tr><tr valign="top"><td><pre>    html += ("&lt;td&gt;&lt;pre&gt;#{html_escape cell}&lt;/pre&gt;&lt;/td&gt;" for cell in cells).join ''</pre></td><td><pre>      html += ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = cells.length; _i &lt; _len; _i++) {
          cell = cells[_i];
          _results.push("&lt;td&gt;&lt;pre&gt;" + (html_escape(cell)) + "&lt;/pre&gt;&lt;/td&gt;");</pre></td></tr><tr valign="top"><td><pre>    html += '&lt;/tr&gt;'
    
  
  for match in matches
    [s_end, d_end] = match</pre></td><td><pre>        }
        return _results;
      })()).join('');
      return html += '&lt;/tr&gt;';
    };
    for (_i = 0, _len = matches.length; _i &lt; _len; _i++) {
      match = matches[_i];
      s_end = match[0], d_end = match[1];</pre></td></tr><tr valign="top"><td><pre>    s_snippet = source_lines[s_start...s_end].join '\n'</pre></td><td><pre>      s_snippet = source_lines.slice(s_start, s_end).join('\n');</pre></td></tr><tr valign="top"><td><pre>    d_snippet = dest_lines[d_start...d_end].join '\n'</pre></td><td><pre>      d_snippet = dest_lines.slice(d_start, d_end).join('\n');</pre></td></tr><tr valign="top"><td><pre>    row [s_snippet, d_snippet]
    s_start = s_end
    d_start = d_end
  
  html += '&lt;/table&gt;'
  console.log html  </pre></td><td><pre>      row([s_snippet, d_snippet]);
      s_start = s_end;
      d_start = d_end;
    }
    html += '&lt;/table&gt;';
    return console.log(html);</pre></td></tr><tr valign="top"><td><pre>
fn_coffee = 'fuzzy.coffee'</pre></td><td><pre>  };
  fn_coffee = 'fuzzy.coffee';</pre></td></tr><tr valign="top"><td><pre>fn_js = 'fuzzy.js'</pre></td><td><pre>  fn_js = 'fuzzy.js';</pre></td></tr></table>
